Today's Topics

Revise Exception handling
String Handling
Date Time Handling 
var-args syntax



Revise

1. What is exception : 
Run time err detected by JVM(JRE) -- mainly by main thread


2. Why exception handling ?
2.1 To allow continuation of the code , in presence of run time errs
2.2 separation
2.3 removes need of explicit

3. Explain the Flow of execution
Eg. try {
int[] data={1,2,3,4};
sop(data[4]);
sop("end of try ...");
} catch (ArrayIndexOutOfBoundsException e)
{
  sop("in catch");
}
sop("cntd"); 


4. What is the syntax of "throw" keyword ?
throw Throwable instance;

5. Who uses "throw" keyword ?
JVM uses throw keyword to raise : built in excs(system excs , eg : AOBexc, NFE,NPE....)

Prog uses throw keyword : to raise custom (user defined) excs
In case of any of above --JVM will alter the flow of exec --will search for MATCHING catch clause --continues further...

6. Explain Inheritance hierarchy of exc handling classes
java.lang
Throwable <--- Error , Exception <---- RunTimeException

7. 

which of the following are legal ? 
try {....} catch (AE e ){..} : legal 
try {....} : illegal
try {....} catch (AE e ){..}  catch (NPE e) {..} catch(Exception e) {catch-all block} : legal
try {....} catch (AE | NPE| NFE e ){..}  catch(Exception e) {catch-all} : legal
try {....} catch(Exception e) {catch-all} catch (AE | NPE| NFE e ){..} :  illegal
try(Scanner sc=new Scanner(...)) {...} : legal
try {...} finally {...} : legal
try {...} finally {...} catch(Exception e){....} :illegal
try {...} catch(Exception e){....} finally {...}  :legal

8. checked vs un checked exceptions
How to identify ? If exc class extends from RuntimeExc : un checked exc
o.w : checked exc
(NOTE : javac DOES NOT force handling of unchecked excs n Error n it's sub classes)

who doesn't differentiate between checked vs un checked exceptions : JVM

who differentiates n how ? : Javac (forces handling of checked excs)


Mention 2 ways of satisfying the javac (otherwise javac error !)
try-catch => actual handling of the exc
OR
throws

9. throw vs throws
throw :keyword used to  raise the  exception(JVM : system/built-in excs , Prog : custom exc), java stmt , appears in method def.
syntax : throw Throwable instance;

throws : meant for javac , appears in method declaration 
eg : public void show(....) throws IOException,InterruptedException
{
 ......
}
Meaning : show() : may throw the exc(possibility) , curnt method is NOT handling the exc. , so its' caller should handle.

When is adding "throws" keyword mandatory ? ???
In case of un-handled (no try-catch) n checked excs 

10. Explain finally : block executes always(in presence as well as absence of exc n before method rets)
typical use case  : clean up resources(eg : File / Socket / DB connections / Scanner(stdin) ....

11. Better alternative to clean up resources : 
try-with-resources
i/f : AutoCloseable 
public void close() throws Exception
eg : try(Scanner sc=new Scanner(...);
FIS in=new FIS(...))
{
.....
} //in.close() , sc.close()

12. Can you open ANY Resource(i.e can you create ANY class instance) using try-with-resources block 's header? NO 
Resource(class) MUST be AutoCloseable 


13. What's the need of Custom exceptions
To recover from validation / B.L failures

Steps
1. Create a class extends : Exception
2. Add parameterized ctor : to init err mesg
eg : public class MyExc extends Exception
{
 public MyExc(String mesg)
 {
 super(mesg);
 }
}
This mesg can be accessed , in catch block :
sop(e.getMessage());
or
sop(e);
or
e.printStackTrace();

------------------------Revision Over ----------------------

1. String Handling (different classes)
1.1 Immutability of strings
1.2 == vs equals
1.3 literal vs non literal string
1.4 String class API (important methods only)
eg: indexOf
public int indexOf(char ch/String substring,int offset)
Meaning : rets index of 1st occurrence of specified char/sub string either from 0th index or specified offset.
rets -1 : if not found 

eg: lastIndexOf
public int lastIndexOf(char ch/String substring,int offset)
Meaning : rets index of last occurrence of specified char/sub string either from 0th index or specified offset.
rets -1 : if not found 








1.5 StringBuilder API


2. Date Time Handling 
Refer to readme : readme_strings_date_varargs.txt

3. var-args (variable no of arguments) : same readme

4. Java Enumeration
refer : regarding enums.txt


5. Wrapper classes in Java

6. Practical Application (mini case study)
Objective : Showroom Management system , which will keep track of vehicles added in the showroom.

Objective : Accept vehicle details : chasisNo(string) : Unique ID, color(enum) , basePrice(double) , manufactureDate(Date),company,isAvailable

Note : vehicle's base price will increase as per the chosen color

Add  validation rules

4.1 manufactureDate : must be in after 1st Jan 2021
4.2 Vehicle color must be valid

Create a Tester class

0. Prompt showroom capacity
Create suitable array.

Options
1. Add Vehicle to the showroom.
Accept data --validate all i/ps --in case of success -- add vehicle , to the showroom.
o.w : throw custom exception

2. Display all vehicle details

0. Exit

Later many more options will be added.


Regular expression patterns (some examples !)
1. Expects alphanumeric string with at least 1 special character
"[a-z]+[A-Z]+[#@$%*\\-]+[0-9]+"

2. Expects alphanumeric string , having "@" n ending with either com|org|net
"[a-z]+[a-z0-9]+@[a-z]*\\.(com|org|net)"







